// verify-config.js: Script para verificar la configuraci√≥n del sistema
console.log('üîç Verificando configuraci√≥n del sistema...');

// Verificar que los m√≥dulos est√©n disponibles
function verifyModules() {
    console.log('\nüì¶ Verificando m√≥dulos:');
    
    // Verificar ModelConfig
    if (typeof window.modelConfig !== 'undefined') {
        console.log('‚úÖ ModelConfig inicializado');
        const config = window.modelConfig.getConfig();
        console.log(`   ‚Ä¢ Proveedor: ${config.provider}`);
        console.log(`   ‚Ä¢ Endpoint: ${config.endpoint}`);
        console.log(`   ‚Ä¢ Modelo: ${config.model}`);
    } else {
        console.log('‚ùå ModelConfig no inicializado');
    }
    
    // Verificar ConfigUI
    if (typeof window.configUI !== 'undefined') {
        console.log('‚úÖ ConfigUI inicializado');
    } else {
        console.log('‚ùå ConfigUI no inicializado');
    }
    
    // Verificar funciones globales
    const globalFunctions = ['showConfigPanel', 'hideConfigPanel', 'testConnection', 'saveConfig'];
    globalFunctions.forEach(func => {
        if (typeof window[func] === 'function') {
            console.log(`‚úÖ ${func} disponible`);
        } else {
            console.log(`‚ùå ${func} no disponible`);
        }
    });
}

// Verificar elementos del DOM
function verifyDOM() {
    console.log('\nüé® Verificando elementos DOM:');
    
    const elements = [
        'config-overlay',
        'provider-grid',
        'endpoint-input',
        'api-key-input',
        'model-select',
        'model-input',
        'temperature-input',
        'max-tokens-input',
        'top-p-input'
    ];
    
    elements.forEach(id => {
        const element = document.getElementById(id);
        if (element) {
            console.log(`‚úÖ ${id} encontrado`);
        } else {
            console.log(`‚ùå ${id} no encontrado`);
        }
    });
}

// Probar detecci√≥n autom√°tica de proveedores
async function testProviderDetection() {
    console.log('\nüîç Probando detecci√≥n de proveedores:');
    
    if (window.modelConfig) {
        try {
            const providers = await window.modelConfig.detectAvailableProviders();
            Object.entries(providers).forEach(([key, result]) => {
                if (result.available) {
                    console.log(`‚úÖ ${key}: Disponible (${result.models.length} modelos)`);
                } else {
                    console.log(`‚ö†Ô∏è ${key}: No disponible`);
                }
            });
        } catch (error) {
            console.log(`‚ùå Error detectando proveedores: ${error.message}`);
        }
    }
}

// Funci√≥n principal de verificaci√≥n
async function runVerification() {
    console.log('üöÄ Iniciando verificaci√≥n del sistema de configuraci√≥n...');
    
    verifyModules();
    verifyDOM();
    await testProviderDetection();
    
    console.log('\n‚úÖ Verificaci√≥n completada. Revisa los resultados arriba.');
    console.log('üí° Para configurar tu modelo, haz clic en "‚öôÔ∏è Configurar" en el header.');
}

// Ejecutar verificaci√≥n cuando el DOM est√© listo
if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', () => {
        setTimeout(runVerification, 2000); // Esperar 2 segundos para que todo se inicialice
    });
} else {
    setTimeout(runVerification, 2000);
}

// Funci√≥n para ejecutar manualmente desde la consola
window.verifyConfig = runVerification;
